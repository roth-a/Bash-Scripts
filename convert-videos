#!/bin/bash




. $HOME/Skripte/functions


echo "###########################"
echo "     Use bash"
echo "###########################"



function convertfile
{
  echo "Output to $2"
  if [ "$simulate" != "y" ] ;then
      nice -n 19 ffmpeg -v $verbosity  -y -i "$1"  -vcodec libx264 -crf $qualityfactor -vf "transpose=dir=$rot" -vf $res    -acodec $acodec -ab 192k  "$2"   </dev/null 
      
#      nice -n 19 ffmpeg -v $verbosity  -y -i "$1"  -vcodec libx264 -crf $qualityfactor -vf "transpose=dir=$rot" -vf $res    -acodec aac -strict experimental -ab 128k "$2"   </dev/null 
      
#       nice -n 19 ffmpeg -v 2 -y -i "$1" -vf "transpose=dir=$rot" -vf $res   -b "$b"k -acodec aac -strict experimental -ab 128k "$2" </dev/null 
  else 
 	echo "nice -n 19 ffmpeg -v $verbosity  -y -i $1  -vcodec libx264 -crf $qualityfactor -vf transpose=dir=$rot -vf $res    -acodec $acodec -strict experimental -ab 128k $2   </dev/null "
  fi
}


from=""
ending="mp4"
ending_target="mp4"
count=1000
b=2000
# frames=20
# res=800x450
# -vf "scale=640:-1"     preserves the aspect ratio
# res=1280x738
res="scale=-1:-1"   # reduce noise with "dctdnoiz=4.5"
rot=-1
qualityfactor=20
verbosity=fatal
post="red"
out=""
acodec=copy
mydate=`date "+%Y-%m-%d-%H-%M-%S"`


while getopts "f:t:e:E:a:q:f:r:p:s:m:v:h" optname
do
  case "$optname" in
    "f")
      echo "Option $optname is $OPTARG"
      from=$OPTARG
      ;; 
    "t")
      echo "Option $optname is $OPTARG"
      out=$OPTARG
      ;;
#     "n")
#       echo "Option $optname is $OPTARG"
#       count=$OPTARG
#       ;;
    "e")
      echo "Option $optname is $OPTARG"
      ending=$OPTARG
      ;;
    "E")
      echo "Option $optname is $OPTARG"
      ending_target=$OPTARG
      ;;
    "q")
      echo "Option $optname is $OPTARG"
      qualityfactor=$OPTARG
      ;;
    "a")
      echo "Option $optname is $OPTARG"
      acodec=$OPTARG
      ;;
#     "b")
#       echo "Option $optname is $OPTARG"
#       b=$OPTARG
#       ;;
    "m")
      echo "Option $optname is $OPTARG"
      rot=$OPTARG
      ;;
    "f")
      echo "Option $optname is $OPTARG"
      frames=$OPTARG
      ;;
    "r")
      echo "Option $optname is $OPTARG"
      res=$OPTARG
      ;;
    "p")
      echo "Option $optname is $OPTARG"
      pre=$OPTARG
      ;;
    "s")
      echo "Simulate"
      simulate="y"
      ;;
    "v")
      echo "Option $optname is $OPTARG"
      verbosity=$OPTARG
      ;;
    "h")
      echo ""
      echo " Help will always be given to those who ask for it"
      echo ""
      echo ""
      echo " -f  From  IS REQUIRED	Please with a / at the end"
      echo " -t  output folder		Please with a / at the end	(default is the source directory $out)"
#       echo " -n  Count files		(default is $count)"
      echo " -e  Extension			(default is $ending)"
      echo " -T  Target Extension		(default is $ending_target)"
      echo " -a  Audio codec		(default is $acodec)"
      echo " -q  qualityfactor		(default is $qualityfactor, 18...24 lower is higher quality)"
#       echo " -b  bitrate		(default is $b)"
      echo " -m  Transformation		(default is no transformation $rot) Available values are clock, cclock, clock_flip, cclock_flip"
#       echo " -f Frames per sencond	(default = $frames)"
      echo " -r  resolution  		(default is \"$res\")"
      echo " -p  Post Output Name		(default is $post)"
      echo " -v  Verbosioty  		(default is $verbosity)"
      echo " -s  Simulate"
      echo " The Input Path just give as the last argument"
      echo "   Example:"
      echo "        bash ~/Skripte/convert-videos -r \"$res\" -s -n 1 -e "$ending" -f /media/mount/Filme/"
     
      exit
      ;;
  esac
done


#cd "${!#}"

mkdir -p "$out"


if [ "$from" = "" ] ;then
  echo "Cant do anything. Give an -f  input folder/file"
  exit
fi



bool_screen=false	
Ask "Create screenshots comparison of the original and the converted file?" "no"  "yes" 
if [ "$result" == "yes" ]; then  
bool_screen=true
fi





if [ -d "$from" ]; then
    cd "$from"
    echo "it's a directory "


    #count files
    countfiles=$(find .  -name \*.$ending | wc -l)
    echo "Applying on $countfiles files"
    
    # randomly sorts them
    # if you don't wnat if randomly just remove |sort -R
    find .  -name \*.$ending | sort | while read file; do
#     find .  -name \*.$ending |sort -R |tail -n $count |while read file; do

      echo ""
      echo ""
      echo ""
      echo ""
      echo "=============================="
      #echo "File ""$file"
      name=`basename "$file"`
      echo "Filename ""$name"

      outname="$out$file-$post-$mydate.$ending_target"
      
      
      # replace the ./ in the outname
	outname=${outname/.\//}      

      # create necessary folders
      mkdir -p "$(dirname "${outname}")"
	
	
      convertfile "$file" "$outname"
      
      
      sizeorg=$(wc -c <"$file")
      sizeout=$(wc -c <"$outname")
      comparison=$(echo "$sizeout/$sizeorg" | bc -l)
	if (( $(echo "$comparison >= 1" | bc -l) )); then
		echo "#! Attention. Converted video is LARGER by $comparison as the original!"
		echo "#! Attention. Converted video is LARGER by $comparison as the original!" >> "$mydate.log"
	else
		echo "#Reduced size to $comparison of original size"
	fi
      
      #echo $bool_screen
	if $bool_screen; then  
		ffmpeg  -v $verbosity  -ss 00:00:20 -i "$file" -vframes 1 -q:v 2 "$file-screenshot.jpg" </dev/null 
		ffmpeg  -v $verbosity  -ss 00:00:20 -i "$outname" -vframes 1 -q:v 2 "$outname-screenshot.jpg" </dev/null 
	fi
      
      echo "trash $file   ### reduced to $comparison > $outname" >> "$mydate.log"
    done 
    
	echo "============================================================================================================================="
	echo "Converted files: "
	echo "============================================================================================================================="
	cat "$mydate.log"
	
	Ask "Delete these videos to trash?" "no"  "yes" 
	if [ "$result" == "yes" ]; then  
		bash "$mydate.log"
	fi

    

else
    echo "it's a file"

      verbosity=info
      file=$from

      #name=`basename "$from"`
      #DIR=$(dirname "${from}")
      outname="$out$from-$post-$mydate.$ending_target"

      convertfile "$from" "$outname"

      sizeorg=$(wc -c <"$file")
      sizeout=$(wc -c <"$outname")
      comparison=$(echo "$sizeout/$sizeorg" | bc -l)
	if (( $(echo "$comparison >= 1" | bc -l) )); then
		echo "! Attention. Converted video is LARGER by $comparison as the original!"
	else
		echo "Reduced size to $comparison of original size"
	fi
      
      #echo $bool_screen
	if $bool_screen; then  
		ffmpeg  -v $verbosity  -ss 00:00:20 -i "$file" -vframes 1 -q:v 2 "$file-screenshot.jpg" </dev/null 
		ffmpeg  -v $verbosity  -ss 00:00:20 -i "$outname" -vframes 1 -q:v 2 "$outname-screenshot.jpg" </dev/null 
	fi
fi
